/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[5,9,14],$V3=[1,15],$V4=[1,37],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,32],$V9=[1,35],$Va=[1,34],$Vb=[1,36],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[15,20,28,29,30,36,37,42,43,68,72,73,119,121,122,123,124],$Vl=[1,58],$Vm=[1,66],$Vn=[2,144],$Vo=[15,42,68,72,73,121,122,123,124],$Vp=[15,46],$Vq=[1,76],$Vr=[1,75],$Vs=[1,78],$Vt=[1,83],$Vu=[1,86],$Vv=[1,119],$Vw=[1,120],$Vx=[1,124],$Vy=[1,129],$Vz=[1,102],$VA=[1,128],$VB=[1,106],$VC=[1,113],$VD=[1,115],$VE=[1,116],$VF=[1,117],$VG=[1,118],$VH=[1,121],$VI=[1,122],$VJ=[1,123],$VK=[15,20,28,29,30,36,37,42,43,68,72,73,80,91,93,96,98,99,100,102,103,105,109,110,111,113,114,115,116,117,118,119,121,122,123,124],$VL=[1,132],$VM=[1,179],$VN=[1,180],$VO=[1,169],$VP=[1,170],$VQ=[1,171],$VR=[1,172],$VS=[1,173],$VT=[1,174],$VU=[1,175],$VV=[1,176],$VW=[1,177],$VX=[1,178],$VY=[1,164],$VZ=[1,165],$V_=[1,167],$V$=[1,166],$V01=[1,168],$V11=[12,48],$V21=[12,13,20,48,94,113,126],$V31=[1,196],$V41=[12,13,20,48,94,113,126,128],$V51=[1,197],$V61=[12,13,20,48,94,113,126,128,130],$V71=[1,200],$V81=[1,201],$V91=[12,13,20,48,94,113,126,128,130,136,137,138,139,140,141,142,144],$Va1=[1,208],$Vb1=[1,209],$Vc1=[12,13,20,48,94,113,126,128,130,136,137,138,139,140,141,142,144,145,147],$Vd1=[12,13,20,48,94,113,126,128,130,136,137,138,139,140,141,142,144,145,147,149],$Ve1=[12,13,20,48,78,79,94,113,126,128,130,136,137,138,139,140,141,142,144,145,147,149],$Vf1=[1,218],$Vg1=[1,217],$Vh1=[1,222],$Vi1=[15,20,28,29,30,36,37,42,43,68,72,73,80,88,90,91,93,96,98,99,100,101,102,103,104,105,109,110,111,114,115,116,117,118,119,121,122,123,124],$Vj1=[15,20,68,72,73,80,91,93,96,98,99,100,102,103,105,109,110,111,114,115,116,117,118,119,121,122,123,124],$Vk1=[1,234],$Vl1=[1,235],$Vm1=[1,236],$Vn1=[1,237],$Vo1=[15,113,121,122,123,124],$Vp1=[10,11,15,18,80,144,152,153,154,155,156,157,158],$Vq1=[1,283],$Vr1=[1,284],$Vs1=[1,285],$Vt1=[1,286],$Vu1=[1,287],$Vv1=[1,288],$Vw1=[1,289],$Vx1=[1,290],$Vy1=[1,291],$Vz1=[20,48],$VA1=[12,13,20,48,69,78,79,81,83,84,85,86,94,112,113,126,128,130,136,137,138,139,140,141,142,144,145,147,149],$VB1=[10,11,15,18,80,132,144,152,153,154,155,156,157,158],$VC1=[2,100],$VD1=[1,320],$VE1=[12,13,20,48,69,78,79,81,83,84,85,86,94,113,126,128,130,136,137,138,139,140,141,142,144,145,147,149],$VF1=[1,339],$VG1=[12,20,48],$VH1=[15,20,28,29,30,36,37,42,43,68,72,73,80,91,93,96,98,99,100,102,103,105,109,110,111,114,115,116,117,118,119,121,122,123,124],$VI1=[1,407],$VJ1=[1,406],$VK1=[1,413],$VL1=[1,412],$VM1=[20,93,96];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"SENT_ARCHIVO":6,"IMPORTAR":7,"CLASE":8,"importar":9,"abrePar":10,"cadena":11,"cierraPar":12,"puntoComa":13,"clase":14,"id":15,"CUERPO_CLASE":16,"hereda_de":17,"abreLlave":18,"SENTENCIAS_CLASE":19,"cierraLlave":20,"SENTENCIA_CLASE":21,"ATRIBUTO":22,"FUNCION":23,"FUNCION_SOBRE":24,"PRINCIPAL":25,"CONSTRUCTOR":26,"VISIBILIDAD":27,"publico":28,"protegido":29,"privado":30,"DECLARACION":31,"DECLA_LISTA":32,"DECLA_PILA":33,"DECLA_COLA":34,"ESTRUCTURA":35,"VISIBLIDAD":36,"arroba":37,"sobreescribir":38,"TIPO_DECLARACION":39,"LISTA_PARAMETROS":40,"CUERPO_FUNCION":41,"vacio":42,"principal":43,"PARAMETROS":44,"PARAMETRO":45,"puntero":46,"COL_ARREGLO":47,"coma":48,"SENTENCIAS":49,"SENTENCIA":50,"CONCATENAR":51,"IMPRIMIR":52,"ROMPER":53,"RETORNO":54,"CONTINUAR":55,"SI":56,"SWITCH":57,"REPETIR_MIENTRAS":58,"HACER_MIENTRAS":59,"CICLO_X":60,"REPETIR":61,"REPETIR_CONTANDO":62,"ENCICLAR":63,"CONTADOR":64,"LEER_TECLADO":65,"ACCESO":66,"ASIGNACION":67,"Lista":68,"igual":69,"nuevo":70,"TIPO_EXPRESION":71,"Pila":72,"Cola":73,"TIPO_EXPRSEION":74,"EXPRESION":75,"INSTANCIA":76,"SIMB_IGUAL":77,"masMas":78,"menosMenos":79,"este":80,"punto":81,"PARAMETROS_LLAMADA":82,"masIgual":83,"menosIgual":84,"porIgual":85,"divIgual":86,"SI_FALSO":87,"Es_falso":88,"SI_VERDADERO":89,"Es_verdadero":90,"Si":91,"CASO":92,"Es_igual_a":93,"dosPuntos":94,"DEFECTO":95,"defecto":96,"LISTA_CASOS":97,"Evaluar_si":98,"Repetir_Mientras":99,"hacer":100,"mientras":101,"Ciclo_doble_condicion":102,"Repetir":103,"hasta_que":104,"Repetir_contando":105,"variable":106,"desde":107,"hasta":108,"Enciclar":109,"Contador":110,"Leer_Teclado":111,"abreCor":112,"cierraCor":113,"concatenar":114,"imprimir":115,"retorno":116,"romper":117,"continuar":118,"estructura":119,"LISTA_DECLARACIONES":120,"t_entero":121,"t_caracter":122,"t_decimal":123,"t_booleano":124,"LOGICA":125,"or":126,"XOR":127,"xor":128,"AND":129,"and":130,"NOT":131,"not":132,"REL":133,"ARITMETICA":134,"SIMB_REL":135,"menor":136,"mayor":137,"menorIgual":138,"mayorIgual":139,"distintoA":140,"igualIgual":141,"mas":142,"MUL":143,"menos":144,"por":145,"POT":146,"division":147,"UNARIO":148,"potencia":149,"NEG":150,"VALOR":151,"entero":152,"decimal":153,"caracter":154,"booleano":155,"nulo":156,"CONVERTIR_CADENA":157,"CONVERTIR_ENTERO":158,"ESTE":159,"CUERPO_ARREGLO":160,"ATRI":161,"ATRI_":162,"insertar":163,"Apilar":164,"Desapilar":165,"cierrPar":166,"Encolar":167,"Desencolar":168,"obtener":169,"buscar":170,"tamanio":171,"LISTA_EXPRESIONES":172,"LISTA_CUERPO_ARREGLO":173,"ELEMENTO_FILA":174,"CONVERTIR_A_CADENA":175,"convertirACadena":176,"CONVERTIR_A_ENTERO":177,"convertirAEntero":178,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"importar",10:"abrePar",11:"cadena",12:"cierraPar",13:"puntoComa",14:"clase",15:"id",17:"hereda_de",18:"abreLlave",20:"cierraLlave",28:"publico",29:"protegido",30:"privado",36:"VISIBLIDAD",37:"arroba",38:"sobreescribir",42:"vacio",43:"principal",46:"puntero",48:"coma",68:"Lista",69:"igual",70:"nuevo",71:"TIPO_EXPRESION",72:"Pila",73:"Cola",74:"TIPO_EXPRSEION",78:"masMas",79:"menosMenos",80:"este",81:"punto",83:"masIgual",84:"menosIgual",85:"porIgual",86:"divIgual",88:"Es_falso",90:"Es_verdadero",91:"Si",93:"Es_igual_a",94:"dosPuntos",96:"defecto",98:"Evaluar_si",99:"Repetir_Mientras",100:"hacer",101:"mientras",102:"Ciclo_doble_condicion",103:"Repetir",104:"hasta_que",105:"Repetir_contando",106:"variable",107:"desde",108:"hasta",109:"Enciclar",110:"Contador",111:"Leer_Teclado",112:"abreCor",113:"cierraCor",114:"concatenar",115:"imprimir",116:"retorno",117:"romper",118:"continuar",119:"estructura",121:"t_entero",122:"t_caracter",123:"t_decimal",124:"t_booleano",126:"or",128:"xor",130:"and",132:"not",136:"menor",137:"mayor",138:"menorIgual",139:"mayorIgual",140:"distintoA",141:"igualIgual",142:"mas",144:"menos",145:"por",147:"division",149:"potencia",152:"entero",153:"decimal",154:"caracter",155:"booleano",156:"nulo",157:"CONVERTIR_CADENA",158:"CONVERTIR_ENTERO",163:"insertar",164:"Apilar",165:"Desapilar",166:"cierrPar",167:"Encolar",168:"Desencolar",169:"obtener",170:"buscar",171:"tamanio",176:"convertirACadena",178:"convertirAEntero"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[7,5],[8,3],[8,5],[16,3],[16,2],[19,1],[19,2],[21,1],[21,1],[21,1],[21,1],[21,1],[27,1],[27,1],[27,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,2],[24,3],[23,5],[23,5],[23,4],[23,4],[25,4],[26,4],[26,3],[40,3],[40,2],[45,2],[45,3],[45,3],[45,4],[44,1],[44,3],[41,3],[41,2],[49,1],[49,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[32,9],[33,9],[34,9],[31,5],[31,3],[31,4],[31,6],[31,5],[67,3],[67,3],[67,3],[67,3],[67,2],[67,2],[67,2],[67,2],[67,4],[67,5],[67,5],[67,5],[67,5],[67,4],[67,4],[67,4],[67,4],[67,6],[76,3],[77,1],[77,1],[77,1],[77,1],[77,1],[87,2],[89,2],[56,6],[56,8],[56,7],[56,7],[56,8],[92,4],[95,3],[97,1],[97,2],[57,8],[57,7],[57,7],[57,6],[58,5],[59,7],[60,7],[61,7],[62,15],[63,3],[64,5],[65,7],[47,3],[47,4],[51,9],[51,7],[52,5],[54,3],[54,2],[53,2],[55,2],[35,6],[120,1],[120,2],[39,1],[39,1],[39,1],[39,1],[39,1],[75,1],[125,3],[125,1],[127,3],[127,1],[129,3],[129,1],[131,2],[131,1],[133,3],[133,1],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[134,3],[134,3],[134,1],[143,3],[143,3],[143,1],[146,3],[146,1],[148,2],[148,2],[148,1],[150,2],[150,1],[151,1],[151,1],[151,1],[151,1],[151,3],[151,1],[151,1],[151,1],[151,1],[151,1],[151,2],[151,2],[151,1],[151,1],[151,1],[66,3],[159,3],[159,3],[159,4],[159,4],[162,1],[162,2],[162,2],[162,4],[162,4],[162,3],[162,4],[162,3],[162,4],[162,4],[162,1],[161,1],[161,3],[172,1],[172,3],[82,2],[82,3],[160,3],[173,1],[173,3],[174,3],[175,5],[177,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 3: case 12: case 50: case 115:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 4: case 5: case 13: case 14: case 15: case 16: case 17: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 144: case 145: case 147: case 149: case 151: case 153: case 155: case 164: case 167: case 169: case 172: case 174: case 183: case 187: case 188: case 189:
this.$=$$[$0];
break;
case 6:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 7:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 8:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 9: case 47: case 215:
this.$= $$[$0-1];
break;
case 10: case 40:
this.$=[];
break;
case 11: case 45: case 49:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 18:
this.$="publico";
break;
case 19:
this.$="protegido";
break;
case 20:
this.$="privado";
break;
case 21: case 27: case 28: case 29: case 30:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 22: case 23: case 24: case 25: case 26:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 31:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 32:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 33:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 34:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 37:

			var a = new Constructor();
			//function(visib, nombre,para,sent) 
			a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 38:

			var a = new Constructor();
			//function(visib, nombre,para,sent) 
			a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 39: case 71: case 72: case 212:
this.$=$$[$0-1];
break;
case 41:

			var a = new Parametro();
			a.setValores($$[$0-1],1,$$[$0]);
			this.$=a;
		
break;
case 42:

			var a = new Parametro();
			a.setValores($$[$0-2],2,$$[$0]);
			this.$=a;
		
break;
case 43:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 44:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 46:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 48: case 210:
this.$= [];
break;
case 73:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 74:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 75:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 76:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 77:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 78:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 79:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var asigna = new AsignacionArreglo(); a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],7);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 80:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-4],$$[$0-3], $$[$0-2]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],4);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,3);
		this.$= asigDec;
	
break;
case 81:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 82:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 83:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 84:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 85:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",5); this.$=a; 
break;
case 86:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",5); this.$=a; 
break;
case 87:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 88:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 89:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 90:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 91:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 92:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 93:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 94:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 95:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 96:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 97:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 98:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 99: case 105: case 106:
this.$= $$[$0];
break;
case 100:
this.$="=";
break;
case 101:
this.$="=+";
break;
case 102:
this.$="=-";
break;
case 103:
this.$="=*";
break;
case 104:
this.$="=/";
break;
case 107:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 108:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 109:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 110:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 111:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 112:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 113:
this.$= $$[$0]
break;
case 114:

			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 116:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 117:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 118:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 119:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 120:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
	
break;
case 121:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 122:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 123:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 124:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 125:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 126:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 127:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 128:
var a = []; a.push($$[$0-1]); this.$;
break;
case 129:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 130:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 131:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 132:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 133:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 134:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 135:
 this.$ = new Romper();
break;
case 136:
this.$ = new Continuar();
break;
case 137:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 138:
var a = []; a.push($$[$0]); this.$= a;
break;
case 139:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 140:
this.$="entero";
break;
case 141:
this.$="caracter";
break;
case 142:
this.$="decimal";
break;
case 143:
this.$="booleano";
break;
case 146:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 148:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 150:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 152:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 154:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 156:
this.$="<";
break;
case 157:
this.$=">";
break;
case 158:
this.$="<=";
break;
case 159:
this.$=">=";
break;
case 160:
this.$="!=";
break;
case 161:
this.$="==";
break;
case 162:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 163:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 165:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 166:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 168:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 170:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 171:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 173:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 175:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 176:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 177:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 178:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 179:
 this.$=$$[$0-2];
break;
case 180:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 181:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 182:
this.$=S1;
break;
case 184:
console.log($$[$0]); var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 185:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 186:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i; console.log(i.getNombreFuncion()); console.log(i.getParametros());
break;
case 190:

		var a = new Acceso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 191:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 192:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 193:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 194:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 195:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 196:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 197:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 198: case 199: case 201: case 203: case 204:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 200: case 202:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], $$[$0]);
			this.$=a;
		
break;
case 205:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 206:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 207:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 208:
 var arreglo = []; var g= arreglo.push($$[$0]); console.log("size "+ g); this.$= arreglo;
break;
case 209:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]); console.log("size "+ g);; this.$= arreglo;
break;
case 211:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 213:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 214:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 216:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 217:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1},{1:[3]},{5:[1,8],6:9,7:4,8:5,9:$V0,14:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,10]},{15:[1,11]},{1:[2,1]},o($V2,[2,3]),{11:[1,12]},{16:13,17:[1,14],18:$V3},{12:[1,16]},o($V2,[2,7]),{15:[1,17]},{15:$V4,19:18,20:[1,19],21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V5,29:$V6,30:$V7,31:27,32:28,33:29,34:30,35:31,36:$V8,37:$V9,39:33,42:$Va,43:$Vb,68:$Vc,72:$Vd,73:$Ve,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{13:[1,49]},{16:50,18:$V3},{15:$V4,20:[1,51],21:52,22:21,23:22,24:23,25:24,26:25,27:26,28:$V5,29:$V6,30:$V7,31:27,32:28,33:29,34:30,35:31,36:$V8,37:$V9,39:33,42:$Va,43:$Vb,68:$Vc,72:$Vd,73:$Ve,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},o($V2,[2,10]),o($Vk,[2,11]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),{15:[1,59],31:53,32:54,33:56,34:55,39:57,42:$Vl,68:$Vc,72:$Vd,73:$Ve,121:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),{35:60,119:$Vf},{15:[1,61]},{15:[1,62]},{38:[1,63]},{10:[1,64]},{10:$Vm,15:$Vn,40:65},o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),{15:[1,67]},{15:[1,68]},{15:[1,69]},{15:[1,70]},o($Vp,[2,140]),o($Vp,[2,141]),o($Vp,[2,142]),o($Vp,[2,143]),o($V2,[2,6]),o($V2,[2,8]),o($V2,[2,9]),o($Vk,[2,12]),o($Vk,[2,21]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),{15:[1,71]},{15:[1,72]},{10:$Vm,15:$Vn,40:73},o($Vk,[2,30]),{10:$Vm,13:$Vq,40:74,47:77,69:$Vr,112:$Vs},{10:$Vm,40:79},{15:$Vt,23:80,27:81,28:$V5,29:$V6,30:$V7,39:82,42:$Va,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{12:[1,84]},{18:$Vu,41:85},{12:[1,88],15:$Vt,39:90,44:87,45:89,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{69:[1,91]},{69:[1,92]},{69:[1,93]},{112:[1,94]},{10:$Vm,13:$Vq,40:95,47:77,69:$Vr,112:$Vs},{10:$Vm,40:96},{18:$Vu,41:97},{18:$Vu,41:98},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,70:$Vz,75:99,76:100,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VK,[2,77]),{13:[1,130],69:[1,131],112:$VL},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:133,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{18:$Vu,41:134},o($Vk,[2,31]),{15:$Vt,39:135,42:$Vl,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{15:[1,136]},o($Vp,$Vn),{18:$Vu,41:137},o($Vk,[2,38]),{15:$VM,20:[1,139],31:141,32:148,33:149,34:150,35:147,39:163,49:138,50:140,51:142,52:143,53:144,54:145,55:146,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{12:[1,181],48:[1,182]},{18:[2,40]},o($V11,[2,45]),{15:[1,183],46:[1,184]},{70:[1,185]},{70:[1,186]},{70:[1,187]},{15:$Vt,31:189,39:163,120:188,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{18:$Vu,41:190},{18:$Vu,41:191},o($Vk,[2,37]),o($Vk,[2,34]),{13:[1,192]},{13:[1,193]},o([12,13,20,48,94,113],[2,145],{126:[1,194]}),{15:[1,195]},o($V21,[2,147],{128:$V31}),o($V41,[2,149],{130:$V51}),o($V61,[2,151]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,133:198,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($V61,[2,153]),o($V61,[2,155],{135:199,136:[1,202],137:[1,203],138:[1,204],139:[1,205],140:[1,206],141:[1,207],142:$V71,144:$V81}),o($V91,[2,164],{145:$Va1,147:$Vb1}),o($Vc1,[2,167]),o($Vc1,[2,169],{149:[1,210]}),o($Vd1,[2,172],{78:[1,211],79:[1,212]}),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,151:213,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Ve1,[2,174]),o($Ve1,[2,175]),o($Ve1,[2,176]),o($Ve1,[2,177]),o($Ve1,[2,178]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:214,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Ve1,[2,180]),o($Ve1,[2,181]),o($Ve1,[2,182]),o($Ve1,[2,183]),o($Ve1,[2,184],{47:215,82:216,10:$Vf1,81:$Vg1,112:$Vs}),o($Ve1,[2,187]),o($Ve1,[2,188]),o($Ve1,[2,189]),{81:[1,219]},{18:$Vh1,173:220,174:221},o($VK,[2,78]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:223,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:224,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{113:[1,225]},o($Vk,[2,35]),{15:[1,226]},{10:$Vm,40:74},o($Vk,[2,36]),{15:$VM,20:[1,227],31:141,32:148,33:149,34:150,35:147,39:163,50:228,51:142,52:143,53:144,54:145,55:146,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vi1,[2,48]),o($Vj1,[2,49]),o($Vj1,[2,51]),o($Vj1,[2,52]),o($Vj1,[2,53]),o($Vj1,[2,54]),o($Vj1,[2,55]),o($Vj1,[2,56]),o($Vj1,[2,57]),o($Vj1,[2,58]),o($Vj1,[2,59]),o($Vj1,[2,60]),o($Vj1,[2,61]),o($Vj1,[2,62]),o($Vj1,[2,63]),o($Vj1,[2,64]),o($Vj1,[2,65]),o($Vj1,[2,66]),o($Vj1,[2,67]),o($Vj1,[2,68]),o($Vj1,[2,69]),o($Vj1,[2,70]),{13:[1,229],69:[1,231],77:230,78:[1,232],79:[1,233],83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1},{13:[1,238]},{15:[1,239]},{10:[1,240]},{10:[1,241]},{13:[1,242]},{10:$Vv,11:$Vw,13:[1,244],15:$Vx,18:$Vy,66:125,75:243,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{13:[1,245]},{10:[1,246]},{10:[1,247]},{10:[1,248]},{18:$Vu,41:249},{10:[1,250]},{18:$Vu,41:251},{10:[1,252]},{15:[1,253]},{10:[1,254]},{10:[1,255]},{15:$Vn,47:260,69:[1,257],77:256,78:[1,258],79:[1,259],81:$Vg1,83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1,112:$Vs},{81:[1,261]},{18:[2,39]},{15:$Vt,39:90,45:262,121:$Vg,122:$Vh,123:$Vi,124:$Vj},o($V11,[2,41],{47:263,112:$Vs}),{15:[1,264]},{68:[1,265]},{72:[1,266]},{73:[1,267]},{15:$Vt,31:269,39:163,113:[1,268],121:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vo1,[2,138]),o($Vk,[2,32]),o($Vk,[2,33]),o($VK,[2,76]),o($VK,[2,80]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,127:270,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vf1,82:271},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,129:272,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,131:273,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($V61,[2,152]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,134:274,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,143:275,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,143:276,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Vp1,[2,156]),o($Vp1,[2,157]),o($Vp1,[2,158]),o($Vp1,[2,159]),o($Vp1,[2,160]),o($Vp1,[2,161]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,144:$VC,146:277,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,144:$VC,146:278,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,80:$VA,144:$VC,146:279,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Vd1,[2,170]),o($Vd1,[2,171]),o($Ve1,[2,173]),{12:[1,280]},o($Ve1,[2,185],{112:$VL}),o($Ve1,[2,186]),{15:$Vq1,161:281,162:282,163:$Vr1,164:$Vs1,165:$Vt1,167:$Vu1,168:$Vv1,169:$Vw1,170:$Vx1,171:$Vy1},{10:$Vv,11:$Vw,12:[1,292],15:$Vx,18:$Vy,66:125,75:294,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127,172:293},{15:[1,296],66:295},{20:[1,297],48:[1,298]},o($Vz1,[2,213]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:294,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127,172:299},{13:[1,300]},{113:[1,301]},o($VA1,[2,128]),{10:$Vm,40:95},o($Vi1,[2,47]),o($Vj1,[2,50]),o($Vj1,[2,71]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:302,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VB1,$VC1,{76:303,70:$Vz}),{13:[2,87]},{13:[2,88]},o($VB1,[2,101]),o($VB1,[2,102]),o($VB1,[2,103]),o($VB1,[2,104]),o($Vj1,[2,72]),{13:$Vq,47:77,69:$Vr,112:$Vs},{15:[1,304]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:305,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Vj1,[2,135]),{13:[1,306]},o($Vj1,[2,134]),o($Vj1,[2,136]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:307,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:308,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:309,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{101:[1,310]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:311,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{104:[1,312]},{106:[1,313]},{18:$Vu,41:314},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:315,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:316,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:317,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VB1,$VC1,{76:318,70:$Vz}),{13:[2,85]},{13:[2,86]},{69:$VD1,77:319,83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1,112:$VL},{15:[1,321],66:322},o($V11,[2,46]),o($V11,[2,43],{112:$VL}),o($V11,[2,42],{47:323,112:$Vs}),{10:[1,324]},{10:[1,325]},{10:[1,326]},{13:[1,327]},o($Vo1,[2,139]),o($V21,[2,146],{128:$V31}),{13:[2,99]},o($V41,[2,148],{130:$V51}),o($V61,[2,150]),o($V61,[2,154],{142:$V71,144:$V81}),o($V91,[2,162],{145:$Va1,147:$Vb1}),o($V91,[2,163],{145:$Va1,147:$Vb1}),o($Vc1,[2,165]),o($Vc1,[2,166]),o($Vc1,[2,168]),o($Ve1,[2,179]),o([12,13,20,48,69,78,79,83,84,85,86,94,113,126,128,130,136,137,138,139,140,141,142,144,145,147,149],[2,190],{81:[1,328]}),o($VE1,[2,206]),o($VE1,[2,195],{47:329,82:330,10:$Vf1,112:$Vs}),{10:[1,331]},{10:[1,332]},{10:[1,333]},{10:[1,334]},{10:[1,335]},{10:[1,336]},{10:[1,337]},o($VE1,[2,205]),o($VE1,[2,210]),{12:[1,338],48:$VF1},o($VG1,[2,208]),o($Ve1,[2,191]),o($Ve1,[2,192],{47:340,82:341,10:$Vf1,81:$Vg1,112:$Vs}),o($Ve1,[2,212]),{18:$Vh1,174:342},{20:[1,343],48:$VF1},o($VK,[2,79]),o($VA1,[2,129]),{13:[2,83]},{13:[2,84]},{48:[1,344]},{12:[1,345]},o($Vj1,[2,133]),{12:[1,346]},{12:[1,347]},{12:[1,348]},{10:[1,349]},{48:[1,350]},{10:[1,351]},{94:[1,352]},o($Vj1,[2,125]),{12:[1,353]},{48:[1,354]},{13:[2,81]},{13:[2,82]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:355,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VB1,$VC1),{47:360,69:[1,357],77:356,78:[1,358],79:[1,359],81:$Vg1,83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1,112:$Vs},{69:[1,362],77:361,78:[1,363],79:[1,364],83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1},o($V11,[2,44],{112:$VL}),{71:[1,365]},{71:[1,366]},{74:[1,367]},o($VH1,[2,137]),{15:$Vq1,162:368,163:$Vr1,164:$Vs1,165:$Vt1,167:$Vu1,168:$Vv1,169:$Vw1,170:$Vx1,171:$Vy1},o($VE1,[2,196],{112:$VL}),o($VE1,[2,197]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:369,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:370,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{166:[1,371]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:372,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{12:[1,373]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:374,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:375,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VE1,[2,211]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:376,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Ve1,[2,193],{112:$VL}),o($Ve1,[2,194]),o($Vz1,[2,214]),o($Vz1,[2,215]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:377,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{13:[1,378]},{18:[1,379]},{18:[1,380]},{18:$Vu,41:381},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:382,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:383,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:384,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{15:[1,385]},{18:$Vu,41:386},{15:[1,387]},{13:[2,89]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:388,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VB1,$VC1,{76:389,70:$Vz}),{13:[2,94]},{13:[2,95]},{69:$VD1,77:390,83:$Vk1,84:$Vl1,85:$Vm1,86:$Vn1,112:$VL},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:391,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($VB1,$VC1,{76:392,70:$Vz}),{13:[2,96]},{13:[2,97]},{12:[1,393]},{12:[1,394]},{12:[1,395]},o($VE1,[2,207]),{12:[1,396]},{12:[1,397]},o($VE1,[2,200]),{12:[1,398]},o($VE1,[2,202]),{12:[1,399]},{12:[1,400]},o($VG1,[2,209]),{12:[1,402],48:[1,401]},o($Vj1,[2,132]),{20:[1,403],87:405,88:$VI1,89:404,90:$VJ1},{20:[1,410],92:411,93:$VK1,95:409,96:$VL1,97:408},o($Vj1,[2,120]),{12:[1,414]},{12:[1,415]},{12:[1,416]},{13:[1,417]},o($Vj1,[2,126]),{12:[1,418]},{13:[2,90]},{13:[2,91]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:419,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{13:[2,92]},{13:[2,93]},{13:[1,420]},{13:[1,421]},{13:[1,422]},o($VE1,[2,198]),o($VE1,[2,199]),o($VE1,[2,201]),o($VE1,[2,203]),o($VE1,[2,204]),{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:423,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{13:[1,424]},o($Vj1,[2,107]),{20:[1,426],87:425,88:$VI1},{20:[1,427],89:428,90:$VJ1},{18:$Vu,41:429},{18:$Vu,41:430},{20:[1,432],92:433,93:$VK1,95:431,96:$VL1},{20:[1,434]},o($Vj1,[2,119]),o($VM1,[2,114]),{94:[1,435]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:436,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{13:[1,437]},{18:$Vu,41:438},{13:[1,439]},{107:[1,440]},{13:[1,441]},{13:[2,98]},o($VH1,[2,73]),o($VH1,[2,74]),o($VH1,[2,75]),{12:[1,442]},o($Vj1,[2,131]),{20:[1,443]},o($Vj1,[2,109]),o($Vj1,[2,110]),{20:[1,444]},o([20,88],[2,106]),o([20,90],[2,105]),{20:[1,445]},o($Vj1,[2,117]),o($VM1,[2,115]),o($Vj1,[2,118]),{15:$VM,31:141,32:148,33:149,34:150,35:147,39:163,49:446,50:140,51:142,52:143,53:144,54:145,55:146,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{94:[1,447]},o($Vj1,[2,121]),o($Vj1,[2,122]),o($Vj1,[2,123]),{94:[1,448]},o($Vj1,[2,127]),{13:[1,449]},o($Vj1,[2,108]),o($Vj1,[2,111]),o($Vj1,[2,116]),{15:$VM,20:[2,113],31:141,32:148,33:149,34:150,35:147,39:163,50:228,51:142,52:143,53:144,54:145,55:146,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{15:$VM,31:141,32:148,33:149,34:150,35:147,39:163,49:450,50:140,51:142,52:143,53:144,54:145,55:146,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:451,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},o($Vj1,[2,130]),o($VM1,[2,112],{31:141,51:142,52:143,53:144,54:145,55:146,35:147,32:148,33:149,34:150,56:151,57:152,58:153,59:154,60:155,61:156,62:157,63:158,64:159,65:160,66:161,67:162,39:163,50:228,15:$VM,68:$Vc,72:$Vd,73:$Ve,80:$VN,91:$VO,98:$VP,99:$VQ,100:$VR,102:$VS,103:$VT,105:$VU,109:$VV,110:$VW,111:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$Vf,121:$Vg,122:$Vh,123:$Vi,124:$Vj}),{13:[1,452]},{108:[1,453]},{94:[1,454]},{10:$Vv,11:$Vw,15:$Vx,18:$Vy,66:125,75:455,80:$VA,125:101,127:103,129:104,131:105,132:$VB,133:107,134:108,143:109,144:$VC,146:110,148:111,150:112,151:114,152:$VD,153:$VE,154:$VF,155:$VG,156:$VH,157:$VI,158:$VJ,159:126,160:127},{12:[1,456]},{18:$Vu,41:457},o($Vj1,[2,124])],
defaultActions: {8:[2,1],88:[2,40],181:[2,39],232:[2,87],233:[2,88],258:[2,85],259:[2,86],271:[2,99],302:[2,83],303:[2,84],317:[2,81],318:[2,82],355:[2,89],358:[2,94],359:[2,95],363:[2,96],364:[2,97],388:[2,90],389:[2,91],391:[2,92],392:[2,93],419:[2,98]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 171
break;
case 2:return 99
break;
case 3:return 100
break;
case 4:return 101
break;
case 5:return 102
break;
case 6:return 103
break;
case 7:return 104
break;
case 8:return 105
break;
case 9:return 106
break;
case 10:return 107
break;
case 11:return 108
break;
case 12:return 109
break;
case 13:return 110
break;
case 14:return 111
break;
case 15:return 98
break;
case 16:return 93
break;
case 17:return 96
break;
case 18:return 88
break;
case 19:return 90
break;
case 20:return 91
break;
case 21:return 68
break;
case 22:return 72
break;
case 23:return 73
break;
case 24:return 163
break;
case 25:return 169
break;
case 26:return 170
break;
case 27:return 167
break;
case 28:return 168
break;
case 29:return 9
break;
case 30:return 37
break;
case 31:return 38
break;
case 32:return 114
break;
case 33:return 48
break;
case 34:return 178
break;
case 35:return 176
break;
case 36:return 115
break;
case 37:return 116
break;
case 38:return 117
break;
case 39:return 43
break;
case 40:return 70
break;
case 41:return 28
break;
case 42:return 29
break;
case 43:return 30
break;
case 44:return 118
break;
case 45:return 156
break;
case 46:return 156
break;
case 47:'nulo'
break;
case 48:return 17
break;
case 49:return 14
break;
case 50:return 80
break;
case 51:return 46
break;
case 52:return 42
break;
case 53:return 155
break;
case 54:return 155 
break;
case 55:return 119
break;
case 56:return 81
break;
case 57:return 121
break;
case 58:return 122
break;
case 59:return 124
break;
case 60:return 123
break;
case 61:return 83
break;
case 62:return 84
break;
case 63:return 85
break;
case 64:return 86
break;
case 65:return 69
break;
case 66:return 78
break;
case 67:return 79
break;
case 68:return 145
break;
case 69:return 147
break;
case 70:return 144
break;
case 71:return 142
break;
case 72:return 149
break;
case 73:return 10
break;
case 74:return 12
break;
case 75:return 18
break;
case 76:return 20
break;
case 77:return 112
break;
case 78:return 113
break;
case 79:return 126
break;
case 80:return 130
break;
case 81:return 128
break;
case 82:return 132
break;
case 83:return 136
break;
case 84:return 137
break;
case 85:return 138
break;
case 86:return 139
break;
case 87:return 141
break;
case 88:return 140
break;
case 89:return 13
break;
case 90:return 94
break;
case 91:return 11;
break;
case 92:return 15
break;
case 93:return 153
break;
case 94:return 152
break;
case 95:return 154
break;
case 96:return 5
break;
case 97:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}