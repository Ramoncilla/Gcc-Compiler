/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,24],$V2=[1,22],$V3=[1,21],$V4=[1,23],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[13,18,27,32,34,125,126,127,128,129,130,131],$Vd=[1,37],$Ve=[1,44],$Vf=[2,119],$Vg=[13,32,125,126,127,128],$Vh=[13,21],$Vi=[1,50],$Vj=[1,49],$Vk=[1,52],$Vl=[1,57],$Vm=[1,60],$Vn=[1,82],$Vo=[1,84],$Vp=[1,88],$Vq=[1,87],$Vr=[1,77],$Vs=[1,85],$Vt=[1,86],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,83],$Vz=[8,9,13,18,27,32,34,77,79,81,82,89,91,94,97,98,99,101,102,104,108,109,110,112,113,114,115,116,117,118,125,126,127,128,129,130,131,139,140,141,142,143,144,145,146],$VA=[1,90],$VB=[1,132],$VC=[1,133],$VD=[1,134],$VE=[1,135],$VF=[1,136],$VG=[1,137],$VH=[1,138],$VI=[1,139],$VJ=[1,140],$VK=[1,141],$VL=[1,142],$VM=[1,143],$VN=[1,144],$VO=[1,145],$VP=[1,126],$VQ=[1,127],$VR=[1,129],$VS=[1,128],$VT=[1,130],$VU=[1,131],$VV=[10,24],$VW=[8,9,10,11,13,18,24,77,79,81,82,89,91,92,94,97,98,99,101,102,104,108,109,110,112,113,114,115,116,117,118,125,126,127,128,139,140,141,142,143,144,145,146],$VX=[1,159],$VY=[8,9,13,18,27,32,34,77,79,81,82,85,87,89,91,94,97,98,99,100,101,102,103,104,108,109,110,113,114,115,116,117,118,125,126,127,128,129,130,131,139,140,141,142,143,144,145,146],$VZ=[8,9,13,18,77,79,81,82,89,91,94,97,98,99,101,102,104,108,109,110,113,114,115,116,117,118,125,126,127,128,139,140,141,142,143,144,145,146],$V_=[1,194],$V$=[1,195],$V01=[10,11,24,111],$V11=[8,9,10,13,79,139,140,141,142,143,144,145,146],$V21=[13,112,125,126,127,128],$V31=[1,293],$V41=[1,292],$V51=[1,300],$V61=[1,299],$V71=[18,91,94];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASE":4,"EOF":5,"IMPORTAR":6,"importar":7,"abrePar":8,"cadena":9,"cierraPar":10,"puntoComa":11,"clase":12,"id":13,"CUERPO_CLASE":14,"hereda_de":15,"abreLlave":16,"SENTENCIAS_CLASE":17,"cierraLlave":18,"PARAMETRO":19,"TIPO_DECLARACION":20,"puntero":21,"COL_ARREGLO":22,"PARAMETROS":23,"coma":24,"LISTA_PARAMETROS":25,"FUNCION_SOBRE":26,"arroba":27,"sobreescribir":28,"FUNCION":29,"VISIBILIDAD":30,"CUERPO_FUNCION":31,"vacio":32,"PRINCIPAL":33,"principal":34,"CONSTRUCTOR":35,"SENTENCIAS":36,"SENTENCIA_CLASE":37,"ATRIBUTO":38,"SENTENCIA":39,"DECLARACION":40,"CONCATENAR":41,"IMPRIMIR":42,"ROMPER":43,"RETORNO":44,"EXPRESION":45,"CONTINUAR":46,"ESTRUCTURA":47,"INSERTA_LISTA":48,"APILAR":49,"DESAPILAR":50,"ENCOLAR":51,"DESENCOLAR":52,"DECLA_LISTA":53,"DECLA_PILA":54,"DECLA_COLA":55,"SI":56,"SWITCH":57,"REPETIR_MIENTRAS":58,"HACER_MIENTRAS":59,"CICLO_X":60,"REPETIR":61,"REPETIR_CONTANDO":62,"ENCICLAR":63,"CONTADOR":64,"LEER_TECLADO":65,"punto":66,"insertar":67,"OBTENER_LISTA":68,"obtener":69,"INDICE_LISTA":70,"buscar":71,"Apilar":72,"Desapilar":73,"cierrPar":74,"Encolar":75,"Desencolar":76,"Lista":77,"igual":78,"nuevo":79,"TIPO_EXPRESION":80,"Pila":81,"Cola":82,"TIPO_EXPRSEION":83,"SI_FALSO":84,"Es_falso":85,"SI_VERDADERO":86,"Es_verdadero":87,"CUERPO_SI":88,"Si":89,"CASO":90,"Es_igual_a":91,"dosPuntos":92,"DEFECTO":93,"defecto":94,"LISTA_CASOS":95,"CUERPO_SWITCH":96,"Evaluar_si":97,"Repetir_Mientras":98,"hacer":99,"mientras":100,"Ciclo_doble_condicion":101,"Repetir":102,"hasta_que":103,"Repetir_contando":104,"variable":105,"desde":106,"hasta":107,"Enciclar":108,"Contador":109,"Leer_Teclado":110,"abreCor":111,"cierraCor":112,"concatenar":113,"imprimir":114,"retorno":115,"romper":116,"continuar":117,"estructura":118,"LISTA_DECLARACIONES":119,"SIMB_IGUAL":120,"masIgual":121,"menosIgual":122,"porIgual":123,"divIgual":124,"t_entero":125,"t_caracter":126,"t_decimal":127,"t_booleano":128,"publico":129,"protegido":130,"privado":131,"LISTA_EXPRESIONES":132,"PARAMETROS_LLAMADA":133,"LLAMADA":134,"INSTANCIA":135,"TERMINAL_EXPRESION":136,"CONVERTIR_A_CADENA":137,"CONVERTIR_A_ENTERO":138,"nulo":139,"convertirACadena":140,"convertirAEntero":141,"entero":142,"decimal":143,"caracter":144,"booleano":145,"tamanioArreglo":146,"SIMB_ARIT":147,"mas":148,"menos":149,"por":150,"division":151,"potencia":152,"SIMB_LOG":153,"and":154,"or":155,"xor":156,"SIMB_REL":157,"menor":158,"mayor":159,"menorIgual":160,"mayorIgual":161,"igualIgual":162,"distintoA":163,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"importar",8:"abrePar",9:"cadena",10:"cierraPar",11:"puntoComa",12:"clase",13:"id",15:"hereda_de",16:"abreLlave",18:"cierraLlave",21:"puntero",24:"coma",27:"arroba",28:"sobreescribir",32:"vacio",34:"principal",66:"punto",67:"insertar",69:"obtener",71:"buscar",72:"Apilar",73:"Desapilar",74:"cierrPar",75:"Encolar",76:"Desencolar",77:"Lista",78:"igual",79:"nuevo",80:"TIPO_EXPRESION",81:"Pila",82:"Cola",83:"TIPO_EXPRSEION",85:"Es_falso",87:"Es_verdadero",89:"Si",91:"Es_igual_a",92:"dosPuntos",94:"defecto",97:"Evaluar_si",98:"Repetir_Mientras",99:"hacer",100:"mientras",101:"Ciclo_doble_condicion",102:"Repetir",103:"hasta_que",104:"Repetir_contando",105:"variable",106:"desde",107:"hasta",108:"Enciclar",109:"Contador",110:"Leer_Teclado",111:"abreCor",112:"cierraCor",113:"concatenar",114:"imprimir",115:"retorno",116:"romper",117:"continuar",118:"estructura",121:"masIgual",122:"menosIgual",123:"porIgual",124:"divIgual",125:"t_entero",126:"t_caracter",127:"t_decimal",128:"t_booleano",129:"publico",130:"protegido",131:"privado",139:"nulo",140:"convertirACadena",141:"convertirAEntero",142:"entero",143:"decimal",144:"caracter",145:"booleano",146:"tamanioArreglo",148:"mas",149:"menos",150:"por",151:"division",152:"potencia",154:"and",155:"or",156:"xor",158:"menor",159:"mayor",160:"menorIgual",161:"mayorIgual",162:"igualIgual",163:"distintoA"},
productions_: [0,[3,2],[6,5],[4,3],[4,5],[14,3],[14,2],[19,2],[19,3],[19,3],[19,4],[23,1],[23,3],[25,3],[25,2],[26,3],[29,5],[29,5],[29,4],[29,4],[33,4],[35,4],[35,3],[31,3],[31,2],[17,1],[17,2],[37,1],[37,1],[37,1],[37,1],[37,1],[36,1],[36,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[48,7],[68,7],[70,7],[49,7],[50,6],[51,7],[52,6],[53,9],[54,9],[55,9],[84,2],[86,2],[88,2],[88,4],[88,3],[88,3],[88,4],[56,5],[90,4],[93,3],[95,1],[95,2],[96,2],[96,1],[96,1],[57,7],[57,6],[58,5],[59,7],[60,7],[61,7],[62,15],[63,3],[64,5],[65,7],[40,5],[40,3],[40,4],[22,3],[22,4],[41,9],[41,7],[42,5],[44,3],[44,2],[43,2],[46,2],[47,6],[119,1],[119,2],[120,1],[120,1],[120,1],[120,1],[120,1],[20,1],[20,1],[20,1],[20,1],[20,1],[30,1],[30,1],[30,1],[38,2],[38,1],[132,1],[132,2],[133,2],[133,3],[134,2],[135,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[137,5],[138,5],[136,1],[136,1],[136,1],[136,1],[136,3],[136,1],[136,1],[147,1],[147,1],[147,1],[147,1],[147,1],[153,1],[153,1],[153,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("llegue hasta aqui");
break;
case 100:
console.log("concatenar 3");
break;
case 101:
console.log("concatenar 2");
break;
case 141:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 142:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 143:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 144:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 146:
console.log("tamanio");
break;
case 148: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162:
this.$ =$$[$0];
break;
case 149: case 150: case 151: case 152:
this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,12:[1,3]},{1:[3]},{5:[1,4]},{13:[1,5]},{1:[2,1]},{14:6,15:[1,7],16:$V0},{5:[2,3]},{13:[1,9]},{13:$V1,17:10,18:[1,11],20:20,26:15,27:$V2,29:14,30:18,32:$V3,33:16,34:$V4,35:17,37:12,38:13,40:19,125:$V5,126:$V6,127:$V7,128:$V8,129:$V9,130:$Va,131:$Vb},{14:32,16:$V0},{13:$V1,18:[1,33],20:20,26:15,27:$V2,29:14,30:18,32:$V3,33:16,34:$V4,35:17,37:34,38:13,40:19,125:$V5,126:$V6,127:$V7,128:$V8,129:$V9,130:$Va,131:$Vb},{5:[2,6]},o($Vc,[2,25]),o($Vc,[2,27]),o($Vc,[2,28]),o($Vc,[2,29]),o($Vc,[2,30]),o($Vc,[2,31]),{13:[1,38],20:36,32:$Vd,40:35,125:$V5,126:$V6,127:$V7,128:$V8},o($Vc,[2,124]),{13:[1,39]},{13:[1,40]},{28:[1,41]},{8:[1,42]},{8:$Ve,13:$Vf,25:43},o($Vg,[2,120]),o($Vg,[2,121]),o($Vg,[2,122]),o($Vh,[2,115]),o($Vh,[2,116]),o($Vh,[2,117]),o($Vh,[2,118]),{5:[2,4]},{5:[2,5]},o($Vc,[2,26]),o($Vc,[2,123]),{13:[1,45]},{13:[1,46]},{8:$Ve,13:$Vf,25:47},{8:$Ve,11:$Vi,22:51,25:48,78:$Vj,111:$Vk},{8:$Ve,25:53},{13:$Vl,20:56,29:54,30:55,32:$V3,125:$V5,126:$V6,127:$V7,128:$V8,129:$V9,130:$Va,131:$Vb},{10:[1,58]},{16:$Vm,31:59},{10:[1,62],13:$Vl,19:63,20:64,23:61,125:$V5,126:$V6,127:$V7,128:$V8},{8:$Ve,11:$Vi,22:51,25:65,78:$Vj,111:$Vk},{8:$Ve,25:66},{16:$Vm,31:67},{16:$Vm,31:68},{8:$Vn,9:$Vo,13:$Vp,45:69,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($Vz,[2,96]),{11:[1,89],111:$VA},{8:$Vn,9:$Vo,13:$Vp,45:91,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{16:$Vm,31:92},o($Vc,[2,15]),{13:$Vl,20:93,32:$Vd,125:$V5,126:$V6,127:$V7,128:$V8},{13:[1,94]},o($Vh,$Vf),{16:$Vm,31:95},o($Vc,[2,22]),{8:$Vn,9:$Vo,13:$VB,18:[1,97],20:125,36:96,39:98,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,68:75,70:76,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{10:[1,146],24:[1,147]},{16:[2,14]},o($VV,[2,11]),{13:[1,148],21:[1,149]},{16:$Vm,31:150},{16:$Vm,31:151},o($Vc,[2,21]),o($Vc,[2,18]),{11:[1,152]},o($VW,[2,131]),o($VW,[2,132]),o($VW,[2,133]),o($VW,[2,134]),o($VW,[2,135]),o($VW,[2,136]),o($VW,[2,137]),o($VW,[2,138]),o($VW,[2,141]),o($VW,[2,142]),o($VW,[2,143]),o($VW,[2,144]),{8:$Vn,9:$Vo,13:$Vp,45:153,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VW,[2,146]),o($VW,[2,147]),{8:[1,154]},{8:[1,155]},{13:[1,156]},{8:$VX,66:[1,158],133:157},o($Vz,[2,97]),{8:$Vn,9:$Vo,13:$Vp,45:160,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{112:[1,161]},o($Vc,[2,19]),{13:[1,162]},{8:$Ve,25:48},o($Vc,[2,20]),{8:$Vn,9:$Vo,13:$VB,18:[1,163],20:125,39:164,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,68:75,70:76,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VY,[2,24]),o($VZ,[2,32]),o($VZ,[2,34]),o($VZ,[2,35]),o($VZ,[2,36]),o($VZ,[2,37]),o($VZ,[2,38]),o($VZ,[2,39]),o($VZ,[2,40]),o($VZ,[2,41]),o($VZ,[2,42]),o($VZ,[2,43]),o($VZ,[2,44]),o($VZ,[2,45]),o($VZ,[2,46]),o($VZ,[2,47]),o($VZ,[2,48]),o($VZ,[2,49]),o($VZ,[2,50]),o($VZ,[2,51]),o($VZ,[2,52]),o($VZ,[2,53]),o($VZ,[2,54]),o($VZ,[2,55]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,58]),o($VZ,[2,59]),{13:[1,165]},{8:[1,166]},{8:[1,167]},{11:[1,168]},{8:$Vn,9:$Vo,11:[1,170],13:$Vp,45:169,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{11:[1,171]},{13:[1,172]},{8:$VX,13:$Vf,66:[1,173],133:157},{13:[1,174]},{13:[1,175]},{13:[1,176]},{8:[1,177]},{8:[1,178]},{8:[1,179]},{16:$Vm,31:180},{8:[1,181]},{16:$Vm,31:182},{8:[1,183]},{13:[1,184]},{8:[1,185]},{8:[1,186]},{16:[2,13]},{13:$Vl,19:187,20:64,125:$V5,126:$V6,127:$V7,128:$V8},o($VV,[2,7],{22:188,111:$Vk}),{13:[1,189]},o($Vc,[2,16]),o($Vc,[2,17]),o($Vz,[2,95]),{10:[1,190]},{8:$Vn,9:$Vo,13:$Vp,45:191,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:192,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$VX,133:193},o($VW,[2,129]),{69:$V_,71:$V$},{8:$Vn,9:$Vo,10:[1,196],13:$Vp,45:198,68:75,70:76,79:$Vq,132:197,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{112:[1,199]},o($V01,[2,98]),{8:$Ve,25:65},o($VY,[2,23]),o($VZ,[2,33]),{11:$Vi,22:51,78:$Vj,111:$Vk},{13:[1,200]},{8:$Vn,9:$Vo,13:$Vp,45:201,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VZ,[2,105]),{11:[1,202]},o($VZ,[2,104]),o($VZ,[2,106]),{111:[1,203]},{67:[1,204],69:$V_,71:$V$,72:[1,205],73:[1,206],75:[1,207],76:[1,208]},{78:[1,209]},{78:[1,210]},{78:[1,211]},{8:$Vn,9:$Vo,13:$Vp,45:212,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:213,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:214,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{100:[1,215]},{8:$Vn,9:$Vo,13:$Vp,45:216,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{103:[1,217]},{105:[1,218]},{16:$Vm,31:219},{8:$Vn,9:$Vo,13:$Vp,45:220,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:221,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VV,[2,12]),o($VV,[2,9],{111:$VA}),o($VV,[2,8],{22:222,111:$Vk}),o($VW,[2,145]),{10:[1,223]},{10:[1,224]},o($VW,[2,130]),{8:[1,225]},{8:[1,226]},o($VW,[2,127]),{8:$Vn,9:$Vo,10:[1,227],13:$Vp,45:228,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($V11,[2,125]),o($V01,[2,99]),{24:[1,229]},{10:[1,230]},o($VZ,[2,103]),{13:$Vl,20:125,40:232,119:231,125:$V5,126:$V6,127:$V7,128:$V8},{8:[1,233]},{8:[1,234]},{8:[1,235]},{8:[1,236]},{8:[1,237]},{79:[1,238]},{79:[1,239]},{79:[1,240]},{10:[1,241]},{10:[1,242]},{10:[1,243]},{8:[1,244]},{24:[1,245]},{8:[1,246]},{92:[1,247]},o($VZ,[2,92]),{10:[1,248]},{24:[1,249]},o($VV,[2,10],{111:$VA}),{11:[1,250]},{11:[1,251]},{8:$Vn,9:$Vo,13:$Vp,45:252,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:253,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VW,[2,128]),o($V11,[2,126]),{8:$Vn,9:$Vo,13:$Vp,45:254,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{11:[1,255]},{13:$Vl,20:125,40:257,112:[1,256],125:$V5,126:$V6,127:$V7,128:$V8},o($V21,[2,108]),{8:$Vn,9:$Vo,13:$Vp,45:258,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:259,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{74:[1,260]},{8:$Vn,9:$Vo,13:$Vp,45:261,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{10:[1,262]},{77:[1,263]},{81:[1,264]},{82:[1,265]},{16:[1,267],88:266},{16:[1,268]},{16:$Vm,31:269},{8:$Vn,9:$Vo,13:$Vp,45:270,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:271,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:272,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{13:[1,273]},{16:$Vm,31:274},{13:[1,275]},o($VW,[2,139]),o($VW,[2,140]),{10:[1,276]},{10:[1,277]},{10:[1,279],24:[1,278]},o($VZ,[2,102]),{11:[1,280]},o($V21,[2,109]),{10:[1,281]},{10:[1,282]},{11:[1,283]},{10:[1,284]},{11:[1,285]},{8:[1,286]},{8:[1,287]},{8:[1,288]},o($VZ,[2,77]),{18:[1,289],84:291,85:$V31,86:290,87:$V41},{18:[1,295],90:298,91:$V51,93:297,94:$V61,95:296,96:294},o($VZ,[2,87]),{10:[1,301]},{10:[1,302]},{10:[1,303]},{11:[1,304]},o($VZ,[2,93]),{10:[1,305]},{11:[1,306]},{11:[1,307]},{8:$Vn,9:$Vo,13:$Vp,45:308,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{11:[1,309]},o($VZ,[2,107]),{11:[1,310]},{11:[1,311]},o($VZ,[2,64]),{11:[1,312]},o($VZ,[2,66]),{80:[1,313]},{80:[1,314]},{83:[1,315]},o($VZ,[2,72]),{18:[1,317],84:316,85:$V31},{18:[1,318],86:319,87:$V41},{16:$Vm,31:320},{16:$Vm,31:321},{18:[1,322]},o($VZ,[2,86]),{18:[2,83],90:324,91:$V51,93:323,94:$V61},{18:[2,84]},o($V71,[2,80]),{92:[1,325]},{8:$Vn,9:$Vo,13:$Vp,45:326,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{11:[1,327]},{16:$Vm,31:328},{11:[1,329]},{106:[1,330]},{11:[1,331]},o($VW,[2,61]),o($VW,[2,62]),{10:[1,332]},o($VZ,[2,101]),o($VZ,[2,60]),o($VZ,[2,63]),o($VZ,[2,65]),{10:[1,333]},{10:[1,334]},{10:[1,335]},{18:[1,336]},o($VZ,[2,74]),o($VZ,[2,75]),{18:[1,337]},o([18,85],[2,71]),o([18,87],[2,70]),o($VZ,[2,85]),{18:[2,82]},o($V71,[2,81]),{8:$Vn,9:$Vo,13:$VB,20:125,36:338,39:98,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,68:75,70:76,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{92:[1,339]},o($VZ,[2,88]),o($VZ,[2,89]),o($VZ,[2,90]),{92:[1,340]},o($VZ,[2,94]),{11:[1,341]},{11:[1,342]},{11:[1,343]},{11:[1,344]},o($VZ,[2,73]),o($VZ,[2,76]),{8:$Vn,9:$Vo,13:$VB,18:[2,79],20:125,39:164,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,68:75,70:76,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$VB,20:125,36:345,39:98,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,68:75,70:76,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{8:$Vn,9:$Vo,13:$Vp,45:346,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},o($VZ,[2,100]),o($VZ,[2,67]),o($VZ,[2,68]),o($VZ,[2,69]),o($V71,[2,78],{136:70,137:71,138:72,135:73,134:74,68:75,70:76,40:99,41:100,42:101,43:102,44:103,45:104,46:105,47:106,48:107,49:108,50:109,51:110,52:111,53:112,54:113,55:114,56:115,57:116,58:117,59:118,60:119,61:120,62:121,63:122,64:123,65:124,20:125,39:164,8:$Vn,9:$Vo,13:$VB,77:$VC,79:$Vq,81:$VD,82:$VE,89:$VF,97:$VG,98:$VH,99:$VI,101:$VJ,102:$VK,104:$VL,108:$VM,109:$VN,110:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT,118:$VU,125:$V5,126:$V6,127:$V7,128:$V8,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy}),{11:[1,347]},{107:[1,348]},{92:[1,349]},{8:$Vn,9:$Vo,13:$Vp,45:350,68:75,70:76,79:$Vq,134:74,135:73,136:70,137:71,138:72,139:$Vr,140:$Vs,141:$Vt,142:$Vu,143:$Vv,144:$Vw,145:$Vx,146:$Vy},{10:[1,351]},{16:$Vm,31:352},o($VZ,[2,91])],
defaultActions: {4:[2,1],6:[2,3],11:[2,6],32:[2,4],33:[2,5],62:[2,14],146:[2,13],297:[2,84],323:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 98
break;
case 2:return 99
break;
case 3:return 100
break;
case 4:return 101
break;
case 5:return 102
break;
case 6:return 103
break;
case 7:return 104
break;
case 8:return 105
break;
case 9:return 106
break;
case 10:return 107
break;
case 11:return 108
break;
case 12:return 109
break;
case 13:return 110
break;
case 14:return 97
break;
case 15:return 91
break;
case 16:return 94
break;
case 17:return 85
break;
case 18:return 87
break;
case 19:return 89
break;
case 20:return 77
break;
case 21:return 81
break;
case 22:return 82
break;
case 23:return 67
break;
case 24:return 69
break;
case 25:return 71
break;
case 26:return 75
break;
case 27:return 76
break;
case 28:return 7
break;
case 29:return 27
break;
case 30:return 28
break;
case 31:return 113
break;
case 32:return 24
break;
case 33:return 141
break;
case 34:return 140
break;
case 35:return 114
break;
case 36:return 115
break;
case 37:return 116
break;
case 38:return 34
break;
case 39:return 79
break;
case 40:return 129
break;
case 41:return 130
break;
case 42:return 131
break;
case 43:return 117
break;
case 44:return 139
break;
case 45:return 139
break;
case 46:'nulo'
break;
case 47:return 15
break;
case 48:return 12
break;
case 49:return 21
break;
case 50:return 32
break;
case 51:return 145
break;
case 52:return 145 
break;
case 53:return 118
break;
case 54:return 66
break;
case 55:return 125
break;
case 56:return 126
break;
case 57:return 128
break;
case 58:return 127
break;
case 59:return 121
break;
case 60:return 122
break;
case 61:return 123
break;
case 62:return 124
break;
case 63:return 78
break;
case 64:return 150
break;
case 65:return 151
break;
case 66:return 149
break;
case 67:return 148
break;
case 68:return 152
break;
case 69:return 8
break;
case 70:return 10
break;
case 71:return 16
break;
case 72:return 18
break;
case 73:return 111
break;
case 74:return 112
break;
case 75:return 155
break;
case 76:return 154
break;
case 77:return 156
break;
case 78:return 'not'
break;
case 79:return 158
break;
case 80:return 159
break;
case 81:return 160
break;
case 82:return 161
break;
case 83:return 162
break;
case 84:return 163
break;
case 85:return 11
break;
case 86:return 92
break;
case 87:return 146
break;
case 88:return 9;
break;
case 89:return 13
break;
case 90:return 143
break;
case 91:return 142
break;
case 92:return 144
break;
case 93:return 5
break;
case 94:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:Repetir_Mientras\b)/,/^(?:hacer\b)/,/^(?:mientras\b)/,/^(?:Ciclo_doble_condicion\b)/,/^(?:Repetir\b)/,/^(?:hasta_que\b)/,/^(?:Repetir_contando\b)/,/^(?:variable\b)/,/^(?:desde\b)/,/^(?:hasta\b)/,/^(?:Enciclar\b)/,/^(?:Contador\b)/,/^(?:Leer_Teclado\b)/,/^(?:Evaluar_si\b)/,/^(?:Es_igual_a\b)/,/^(?:defecto\b)/,/^(?:Es_falso\b)/,/^(?:Es_verdadero\b)/,/^(?:Si\b)/,/^(?:Lista\b)/,/^(?:Pila\b)/,/^(?:Cola\b)/,/^(?:insertar\b)/,/^(?:obtener\b)/,/^(?:buscar\b)/,/^(?:Encolar\b)/,/^(?:Desencolar\b)/,/^(?:importar\b)/,/^(?:@)/,/^(?:Sobreescribir\b)/,/^(?:concatenar\b)/,/^(?:,)/,/^(?:convertirAEntero\b)/,/^(?:convertirACadena\b)/,/^(?:imprimir\b)/,/^(?:retorno\b)/,/^(?:romper\b)/,/^(?:principal\b)/,/^(?:nuevo\b)/,/^(?:publico\b)/,/^(?:protegido\b)/,/^(?:privado\b)/,/^(?:continuar\b)/,/^(?:Nada\b)/,/^(?:\{'\\0'\})/,/^(?:\{"\\0"\}return\b)/,/^(?:hereda_de\b)/,/^(?:clase\b)/,/^(?:puntero\b)/,/^(?:vacio\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:estructura\b)/,/^(?:\.)/,/^(?:entero\b)/,/^(?:caracter\b)/,/^(?:booleano\b)/,/^(?:decimal\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\?\?)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?::)/,/^(?:(((([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)(\.)(tamanio))))/,/^(?:"(\\.|[^"])*")/,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:([0-9]+))/,/^(?:('([0-9]|[a-zA-Z])'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}