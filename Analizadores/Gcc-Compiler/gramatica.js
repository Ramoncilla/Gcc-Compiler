/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,29],$V2=[1,30],$V3=[1,31],$V4=[1,32],$V5=[1,24],$V6=[1,27],$V7=[1,26],$V8=[1,28],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[13,18,27,28,29,36,38,42,44,81,85,86,122,129,130,131,132],$Vi=[1,49],$Vj=[1,57],$Vk=[2,131],$Vl=[13,42,81,85,86,129,130,131,132],$Vm=[13,21],$Vn=[1,67],$Vo=[1,66],$Vp=[1,69],$Vq=[1,74],$Vr=[1,77],$Vs=[1,105],$Vt=[1,106],$Vu=[1,111],$Vv=[1,110],$Vw=[1,98],$Vx=[1,112],$Vy=[1,108],$Vz=[1,109],$VA=[1,101],$VB=[1,102],$VC=[1,103],$VD=[1,104],$VE=[1,107],$VF=[13,18,27,28,29,36,38,42,44,81,85,86,93,95,98,101,102,103,105,106,108,112,113,114,116,117,118,119,120,121,122,129,130,131,132],$VG=[1,114],$VH=[1,154],$VI=[1,155],$VJ=[1,156],$VK=[1,157],$VL=[1,158],$VM=[1,159],$VN=[1,160],$VO=[1,161],$VP=[1,162],$VQ=[1,163],$VR=[1,164],$VS=[1,149],$VT=[1,150],$VU=[1,152],$VV=[1,151],$VW=[1,153],$VX=[10,24],$VY=[1,179],$VZ=[1,178],$V_=[1,180],$V$=[1,181],$V01=[1,182],$V11=[8,9,10,11,13,24,83,96,116,140,148,150,154,155,156,157,158,159,160,161,162,163,164],$V21=[1,189],$V31=[13,18,27,28,29,36,38,42,44,81,85,86,89,91,93,95,98,101,102,103,104,105,106,107,108,112,113,114,117,118,119,120,121,122,129,130,131,132],$V41=[13,18,81,85,86,93,95,98,101,102,103,105,106,108,112,113,114,117,118,119,120,121,122,129,130,131,132],$V51=[13,116,129,130,131,132],$V61=[8,9,13,83,140,148,154,155,156,157,158,159,160],$V71=[8,9,10,11,13,24,83,96,116,140,148,154,155,156,157,158,159,160],$V81=[10,11,24,115],$V91=[8,9,10,13,83,140,148,154,155,156,157,158,159,160],$Va1=[13,18,27,28,29,36,38,42,44,81,85,86,93,95,98,101,102,103,105,106,108,112,113,114,117,118,119,120,121,122,129,130,131,132],$Vb1=[1,318],$Vc1=[1,317],$Vd1=[1,325],$Ve1=[1,324],$Vf1=[18,95,98];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASE":4,"EOF":5,"IMPORTAR":6,"importar":7,"abrePar":8,"cadena":9,"cierraPar":10,"puntoComa":11,"clase":12,"id":13,"CUERPO_CLASE":14,"hereda_de":15,"abreLlave":16,"SENTENCIAS_CLASE":17,"cierraLlave":18,"PARAMETRO":19,"TIPO_DECLARACION":20,"puntero":21,"COL_ARREGLO":22,"PARAMETROS":23,"coma":24,"LISTA_PARAMETROS":25,"VISIBILIDAD":26,"publico":27,"protegido":28,"privado":29,"ATRIBUTO":30,"DECLARACION":31,"DECLA_LISTA":32,"DECLA_PILA":33,"DECLA_COLA":34,"ESTRUCTURA":35,"VISIBLIDAD":36,"FUNCION_SOBRE":37,"arroba":38,"sobreescribir":39,"FUNCION":40,"CUERPO_FUNCION":41,"vacio":42,"PRINCIPAL":43,"principal":44,"CONSTRUCTOR":45,"SENTENCIAS":46,"SENTENCIA_CLASE":47,"SENTENCIA":48,"CONCATENAR":49,"IMPRIMIR":50,"ROMPER":51,"RETORNO":52,"CONTINUAR":53,"INSERTA_LISTA":54,"APILAR":55,"DESAPILAR":56,"ENCOLAR":57,"DESENCOLAR":58,"SI":59,"SWITCH":60,"REPETIR_MIENTRAS":61,"HACER_MIENTRAS":62,"CICLO_X":63,"REPETIR":64,"REPETIR_CONTANDO":65,"ENCICLAR":66,"CONTADOR":67,"LEER_TECLADO":68,"punto":69,"insertar":70,"EXPRESION":71,"OBTENER_LISTA":72,"obtener":73,"INDICE_LISTA":74,"buscar":75,"Apilar":76,"Desapilar":77,"cierrPar":78,"Encolar":79,"Desencolar":80,"Lista":81,"igual":82,"nuevo":83,"TIPO_EXPRESION":84,"Pila":85,"Cola":86,"TIPO_EXPRSEION":87,"SI_FALSO":88,"Es_falso":89,"SI_VERDADERO":90,"Es_verdadero":91,"CUERPO_SI":92,"Si":93,"CASO":94,"Es_igual_a":95,"dosPuntos":96,"DEFECTO":97,"defecto":98,"LISTA_CASOS":99,"CUERPO_SWITCH":100,"Evaluar_si":101,"Repetir_Mientras":102,"hacer":103,"mientras":104,"Ciclo_doble_condicion":105,"Repetir":106,"hasta_que":107,"Repetir_contando":108,"variable":109,"desde":110,"hasta":111,"Enciclar":112,"Contador":113,"Leer_Teclado":114,"abreCor":115,"cierraCor":116,"concatenar":117,"imprimir":118,"retorno":119,"romper":120,"continuar":121,"estructura":122,"LISTA_DECLARACIONES":123,"SIMB_IGUAL":124,"masIgual":125,"menosIgual":126,"porIgual":127,"divIgual":128,"t_entero":129,"t_caracter":130,"t_decimal":131,"t_booleano":132,"LISTA_EXPRESIONES":133,"PARAMETROS_LLAMADA":134,"LLAMADA":135,"INSTANCIA":136,"TERMINAL_EXPRESION":137,"CONVERTIR_A_CADENA":138,"CONVERTIR_A_ENTERO":139,"tamanioArreglo":140,"ARITMETICA":141,"NOT":142,"SIMB_ARIT":143,"RELACIONAL":144,"SIMB_REL":145,"LOGICA":146,"SIMB_LOG":147,"not":148,"NEGATIVO":149,"menos":150,"UNARIO":151,"menosMenos":152,"masMas":153,"convertirACadena":154,"convertirAEntero":155,"entero":156,"decimal":157,"caracter":158,"booleano":159,"nulo":160,"mas":161,"por":162,"division":163,"potencia":164,"and":165,"or":166,"xor":167,"menor":168,"mayor":169,"menorIgual":170,"mayorIgual":171,"igualIgual":172,"distintoA":173,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"importar",8:"abrePar",9:"cadena",10:"cierraPar",11:"puntoComa",12:"clase",13:"id",15:"hereda_de",16:"abreLlave",18:"cierraLlave",21:"puntero",24:"coma",27:"publico",28:"protegido",29:"privado",36:"VISIBLIDAD",38:"arroba",39:"sobreescribir",42:"vacio",44:"principal",69:"punto",70:"insertar",73:"obtener",75:"buscar",76:"Apilar",77:"Desapilar",78:"cierrPar",79:"Encolar",80:"Desencolar",81:"Lista",82:"igual",83:"nuevo",84:"TIPO_EXPRESION",85:"Pila",86:"Cola",87:"TIPO_EXPRSEION",89:"Es_falso",91:"Es_verdadero",93:"Si",95:"Es_igual_a",96:"dosPuntos",98:"defecto",101:"Evaluar_si",102:"Repetir_Mientras",103:"hacer",104:"mientras",105:"Ciclo_doble_condicion",106:"Repetir",107:"hasta_que",108:"Repetir_contando",109:"variable",110:"desde",111:"hasta",112:"Enciclar",113:"Contador",114:"Leer_Teclado",115:"abreCor",116:"cierraCor",117:"concatenar",118:"imprimir",119:"retorno",120:"romper",121:"continuar",122:"estructura",125:"masIgual",126:"menosIgual",127:"porIgual",128:"divIgual",129:"t_entero",130:"t_caracter",131:"t_decimal",132:"t_booleano",140:"tamanioArreglo",148:"not",150:"menos",152:"menosMenos",153:"masMas",154:"convertirACadena",155:"convertirAEntero",156:"entero",157:"decimal",158:"caracter",159:"booleano",160:"nulo",161:"mas",162:"por",163:"division",164:"potencia",165:"and",166:"or",167:"xor",168:"menor",169:"mayor",170:"menorIgual",171:"mayorIgual",172:"igualIgual",173:"distintoA"},
productions_: [0,[3,2],[6,5],[4,3],[4,5],[14,3],[14,2],[19,2],[19,3],[19,3],[19,4],[23,1],[23,3],[25,3],[25,2],[26,1],[26,1],[26,1],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,2],[30,2],[30,2],[30,2],[37,3],[40,5],[40,5],[40,4],[40,4],[43,4],[45,4],[45,3],[41,3],[41,2],[17,1],[17,2],[47,1],[47,1],[47,1],[47,1],[47,1],[46,1],[46,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[54,7],[72,7],[74,7],[55,7],[56,6],[57,7],[58,6],[32,9],[33,9],[34,9],[88,2],[90,2],[92,2],[92,4],[92,3],[92,3],[92,4],[59,5],[94,4],[97,3],[99,1],[99,2],[100,2],[100,1],[100,1],[60,7],[60,6],[61,5],[62,7],[63,7],[64,7],[65,15],[66,3],[67,5],[68,7],[31,5],[31,3],[31,4],[22,3],[22,4],[49,9],[49,7],[50,5],[52,3],[52,2],[51,2],[53,2],[35,6],[123,1],[123,2],[124,1],[124,1],[124,1],[124,1],[124,1],[20,1],[20,1],[20,1],[20,1],[20,1],[133,1],[133,2],[134,2],[134,3],[135,2],[136,3],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[141,3],[144,3],[146,3],[142,2],[149,2],[151,2],[151,2],[138,5],[139,5],[137,1],[137,1],[137,1],[137,1],[137,3],[137,1],[137,1],[143,1],[143,1],[143,1],[143,1],[143,1],[147,1],[147,1],[147,1],[145,1],[145,1],[145,1],[145,1],[145,1],[145,1],[145,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("llegue hasta aqui");
break;
case 112:
console.log("concatenar 3");
break;
case 113:
console.log("concatenar 2");
break;
case 157:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 158:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 159:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 160:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 164: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178:
this.$ =$$[$0];
break;
case 165: case 166: case 167: case 168:
this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,12:[1,3]},{1:[3]},{5:[1,4]},{13:[1,5]},{1:[2,1]},{14:6,15:[1,7],16:$V0},{5:[2,3]},{13:[1,9]},{13:$V1,17:10,18:[1,11],20:25,26:18,27:$V2,28:$V3,29:$V4,30:13,31:19,32:20,33:21,34:22,35:23,36:$V5,37:15,38:$V6,40:14,42:$V7,43:16,44:$V8,45:17,47:12,81:$V9,85:$Va,86:$Vb,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{14:41,16:$V0},{13:$V1,18:[1,42],20:25,26:18,27:$V2,28:$V3,29:$V4,30:13,31:19,32:20,33:21,34:22,35:23,36:$V5,37:15,38:$V6,40:14,42:$V7,43:16,44:$V8,45:17,47:43,81:$V9,85:$Va,86:$Vb,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{5:[2,6]},o($Vh,[2,38]),o($Vh,[2,40]),o($Vh,[2,41]),o($Vh,[2,42]),o($Vh,[2,43]),o($Vh,[2,44]),{13:[1,50],20:48,31:44,32:45,33:47,34:46,42:$Vi,81:$V9,85:$Va,86:$Vb,129:$Vd,130:$Ve,131:$Vf,132:$Vg},o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),{35:51,122:$Vc},{13:[1,52]},{13:[1,53]},{39:[1,54]},{8:[1,55]},{8:$Vj,13:$Vk,25:56},o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),{13:[1,58]},{13:[1,59]},{13:[1,60]},{13:[1,61]},o($Vm,[2,127]),o($Vm,[2,128]),o($Vm,[2,129]),o($Vm,[2,130]),{5:[2,4]},{5:[2,5]},o($Vh,[2,39]),o($Vh,[2,18]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),{13:[1,62]},{13:[1,63]},{8:$Vj,13:$Vk,25:64},o($Vh,[2,27]),{8:$Vj,11:$Vn,22:68,25:65,82:$Vo,115:$Vp},{8:$Vj,25:70},{13:$Vq,20:73,26:72,27:$V2,28:$V3,29:$V4,40:71,42:$V7,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{10:[1,75]},{16:$Vr,41:76},{10:[1,79],13:$Vq,19:80,20:81,23:78,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{82:[1,82]},{82:[1,83]},{82:[1,84]},{115:[1,85]},{8:$Vj,11:$Vn,22:68,25:86,82:$Vo,115:$Vp},{8:$Vj,25:87},{16:$Vr,41:88},{16:$Vr,41:89},{8:$Vs,9:$Vt,13:$Vu,71:90,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($VF,[2,108]),{11:[1,113],115:$VG},{8:$Vs,9:$Vt,13:$Vu,71:115,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{16:$Vr,41:116},o($Vh,[2,28]),{13:$Vq,20:117,42:$Vi,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{13:[1,118]},o($Vm,$Vk),{16:$Vr,41:119},o($Vh,[2,35]),{13:$VH,18:[1,121],20:148,31:123,32:135,33:136,34:137,35:129,46:120,48:122,49:124,50:125,51:126,52:127,53:128,54:130,55:131,56:132,57:133,58:134,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{10:[1,165],24:[1,166]},{16:[2,14]},o($VX,[2,11]),{13:[1,167],21:[1,168]},{83:[1,169]},{83:[1,170]},{83:[1,171]},{13:$Vq,20:148,31:173,123:172,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{16:$Vr,41:174},{16:$Vr,41:175},o($Vh,[2,34]),o($Vh,[2,31]),{11:[1,176],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V11,[2,138]),o($V11,[2,139]),o($V11,[2,140]),o($V11,[2,141]),o($V11,[2,142]),o($V11,[2,143]),o($V11,[2,144]),o($V11,[2,145]),o($V11,[2,146]),o($V11,[2,147]),o($V11,[2,157]),o($V11,[2,158]),o($V11,[2,159]),o($V11,[2,160]),{8:$Vs,9:$Vt,13:$Vu,71:183,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V11,[2,162]),o($V11,[2,163]),{8:[1,184]},{8:[1,185]},{13:[1,186]},{8:$V21,69:[1,188],134:187},{8:$Vs,9:$Vt,13:$Vu,71:190,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($VF,[2,109]),{8:$Vs,9:$Vt,13:$Vu,71:191,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{116:[1,192],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($Vh,[2,32]),{13:[1,193]},{8:$Vj,25:65},o($Vh,[2,33]),{13:$VH,18:[1,194],20:148,31:123,32:135,33:136,34:137,35:129,48:195,49:124,50:125,51:126,52:127,53:128,54:130,55:131,56:132,57:133,58:134,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},o($V31,[2,37]),o($V41,[2,45]),o($V41,[2,47]),o($V41,[2,48]),o($V41,[2,49]),o($V41,[2,50]),o($V41,[2,51]),o($V41,[2,52]),o($V41,[2,53]),o($V41,[2,54]),o($V41,[2,55]),o($V41,[2,56]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),o($V41,[2,62]),o($V41,[2,63]),o($V41,[2,64]),o($V41,[2,65]),o($V41,[2,66]),o($V41,[2,67]),o($V41,[2,68]),o($V41,[2,69]),o($V41,[2,70]),o($V41,[2,71]),{13:[1,196]},{8:[1,197]},{8:[1,198]},{11:[1,199]},{8:$Vs,9:$Vt,11:[1,201],13:$Vu,71:200,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{11:[1,202]},{13:$Vk,69:[1,203]},{8:[1,204]},{8:[1,205]},{8:[1,206]},{16:$Vr,41:207},{8:[1,208]},{16:$Vr,41:209},{8:[1,210]},{13:[1,211]},{8:[1,212]},{8:[1,213]},{16:[2,13]},{13:$Vq,19:214,20:81,129:$Vd,130:$Ve,131:$Vf,132:$Vg},o($VX,[2,7],{22:215,115:$Vp}),{13:[1,216]},{81:[1,217]},{85:[1,218]},{86:[1,219]},{13:$Vq,20:148,31:221,116:[1,220],129:$Vd,130:$Ve,131:$Vf,132:$Vg},o($V51,[2,120]),o($Vh,[2,29]),o($Vh,[2,30]),o($VF,[2,107]),{8:$Vs,9:$Vt,13:$Vu,71:222,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V61,[2,164]),o($V61,[2,165]),o($V61,[2,166]),o($V61,[2,167]),o($V61,[2,168]),{10:[1,223],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{8:$Vs,9:$Vt,13:$Vu,71:224,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:225,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$V21,134:226},o($V11,[2,136]),{73:[1,227],75:[1,228]},{8:$Vs,9:$Vt,10:[1,229],13:$Vu,71:231,72:96,74:97,83:$Vv,133:230,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V71,[2,151],{143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01}),{116:[1,232],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V81,[2,110]),{8:$Vj,25:86},o($V31,[2,36]),o($V41,[2,46]),{11:$Vn,22:68,82:$Vo,115:$Vp},{13:[1,233]},{8:$Vs,9:$Vt,13:$Vu,71:234,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V41,[2,117]),{11:[1,235],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V41,[2,116]),o($V41,[2,118]),{70:[1,236],76:[1,237],77:[1,238],79:[1,239],80:[1,240]},{8:$Vs,9:$Vt,13:$Vu,71:241,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:242,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:243,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{104:[1,244]},{8:$Vs,9:$Vt,13:$Vu,71:245,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{107:[1,246]},{109:[1,247]},{16:$Vr,41:248},{8:$Vs,9:$Vt,13:$Vu,71:249,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:250,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($VX,[2,12]),o($VX,[2,9],{115:$VG}),o($VX,[2,8],{22:251,115:$Vp}),{8:[1,252]},{8:[1,253]},{8:[1,254]},{11:[1,255]},o($V51,[2,121]),o($V71,[2,148],{143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01}),o($V11,[2,161]),{10:[1,256],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,257],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V11,[2,137]),{8:[1,258]},{8:[1,259]},o($V11,[2,134]),{8:$Vs,9:$Vt,10:[1,260],13:$Vu,71:261,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V91,[2,132],{143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01}),o($V81,[2,111]),{24:[1,262]},{10:[1,263],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V41,[2,115]),{8:[1,264]},{8:[1,265]},{8:[1,266]},{8:[1,267]},{8:[1,268]},{10:[1,269],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,270],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,271],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{8:[1,272]},{24:[1,273],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{8:[1,274]},{96:[1,275]},o($V41,[2,104]),{10:[1,276],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{24:[1,277],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($VX,[2,10],{115:$VG}),{84:[1,278]},{84:[1,279]},{87:[1,280]},o($Va1,[2,119]),{11:[1,281]},{11:[1,282]},{8:$Vs,9:$Vt,13:$Vu,71:283,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:284,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V11,[2,135]),o($V91,[2,133],{143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01}),{8:$Vs,9:$Vt,13:$Vu,71:285,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{11:[1,286]},{8:$Vs,9:$Vt,13:$Vu,71:287,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:288,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{78:[1,289]},{8:$Vs,9:$Vt,13:$Vu,71:290,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{10:[1,291]},{16:[1,293],92:292},{16:[1,294]},{16:$Vr,41:295},{8:$Vs,9:$Vt,13:$Vu,71:296,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:297,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{8:$Vs,9:$Vt,13:$Vu,71:298,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{13:[1,299]},{16:$Vr,41:300},{13:[1,301]},{10:[1,302]},{10:[1,303]},{10:[1,304]},o($V11,[2,155]),o($V11,[2,156]),{10:[1,305],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,306],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,308],24:[1,307],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V41,[2,114]),{10:[1,309],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,310],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{11:[1,311]},{10:[1,312],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{11:[1,313]},o($V41,[2,89]),{18:[1,314],88:316,89:$Vb1,90:315,91:$Vc1},{18:[1,320],94:323,95:$Vd1,97:322,98:$Ve1,99:321,100:319},o($V41,[2,99]),{10:[1,326],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,327],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{10:[1,328],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{11:[1,329]},o($V41,[2,105]),{10:[1,330]},{11:[1,331]},{11:[1,332]},{11:[1,333]},{11:[1,334]},{11:[1,335]},{8:$Vs,9:$Vt,13:$Vu,71:336,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{11:[1,337]},{11:[1,338]},{11:[1,339]},o($V41,[2,76]),{11:[1,340]},o($V41,[2,78]),o($V41,[2,84]),{18:[1,342],88:341,89:$Vb1},{18:[1,343],90:344,91:$Vc1},{16:$Vr,41:345},{16:$Vr,41:346},{18:[1,347]},o($V41,[2,98]),{18:[2,95],94:349,95:$Vd1,97:348,98:$Ve1},{18:[2,96]},o($Vf1,[2,92]),{96:[1,350]},{8:$Vs,9:$Vt,13:$Vu,71:351,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{11:[1,352]},{16:$Vr,41:353},{11:[1,354]},{110:[1,355]},{11:[1,356]},o($Va1,[2,79]),o($Va1,[2,80]),o($Va1,[2,81]),o($V11,[2,73]),o($V11,[2,74]),{10:[1,357],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V41,[2,113]),o($V41,[2,72]),o($V41,[2,75]),o($V41,[2,77]),{18:[1,358]},o($V41,[2,86]),o($V41,[2,87]),{18:[1,359]},o([18,89],[2,83]),o([18,91],[2,82]),o($V41,[2,97]),{18:[2,94]},o($Vf1,[2,93]),{13:$VH,20:148,31:123,32:135,33:136,34:137,35:129,46:360,48:122,49:124,50:125,51:126,52:127,53:128,54:130,55:131,56:132,57:133,58:134,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{96:[1,361],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},o($V41,[2,100]),o($V41,[2,101]),o($V41,[2,102]),{96:[1,362]},o($V41,[2,106]),{11:[1,363]},o($V41,[2,85]),o($V41,[2,88]),{13:$VH,18:[2,91],20:148,31:123,32:135,33:136,34:137,35:129,48:195,49:124,50:125,51:126,52:127,53:128,54:130,55:131,56:132,57:133,58:134,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{13:$VH,20:148,31:123,32:135,33:136,34:137,35:129,46:364,48:122,49:124,50:125,51:126,52:127,53:128,54:130,55:131,56:132,57:133,58:134,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg},{8:$Vs,9:$Vt,13:$Vu,71:365,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},o($V41,[2,112]),o($Vf1,[2,90],{31:123,49:124,50:125,51:126,52:127,53:128,35:129,54:130,55:131,56:132,57:133,58:134,32:135,33:136,34:137,59:138,60:139,61:140,62:141,63:142,64:143,65:144,66:145,67:146,68:147,20:148,48:195,13:$VH,81:$V9,85:$Va,86:$Vb,93:$VI,101:$VJ,102:$VK,103:$VL,105:$VM,106:$VN,108:$VO,112:$VP,113:$VQ,114:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:$VW,122:$Vc,129:$Vd,130:$Ve,131:$Vf,132:$Vg}),{11:[1,366],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{111:[1,367]},{96:[1,368]},{8:$Vs,9:$Vt,13:$Vu,71:369,72:96,74:97,83:$Vv,135:95,136:94,137:91,138:92,139:93,140:$Vw,141:99,142:100,148:$Vx,154:$Vy,155:$Vz,156:$VA,157:$VB,158:$VC,159:$VD,160:$VE},{10:[1,370],143:177,150:$VY,161:$VZ,162:$V_,163:$V$,164:$V01},{16:$Vr,41:371},o($V41,[2,103])],
defaultActions: {4:[2,1],6:[2,3],11:[2,6],41:[2,4],42:[2,5],79:[2,14],165:[2,13],322:[2,96],348:[2,94]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 102
break;
case 2:return 103
break;
case 3:return 104
break;
case 4:return 105
break;
case 5:return 106
break;
case 6:return 107
break;
case 7:return 108
break;
case 8:return 109
break;
case 9:return 110
break;
case 10:return 111
break;
case 11:return 112
break;
case 12:return 113
break;
case 13:return 114
break;
case 14:return 101
break;
case 15:return 95
break;
case 16:return 98
break;
case 17:return 89
break;
case 18:return 91
break;
case 19:return 93
break;
case 20:return 81
break;
case 21:return 85
break;
case 22:return 86
break;
case 23:return 70
break;
case 24:return 73
break;
case 25:return 75
break;
case 26:return 79
break;
case 27:return 80
break;
case 28:return 7
break;
case 29:return 38
break;
case 30:return 39
break;
case 31:return 117
break;
case 32:return 24
break;
case 33:return 155
break;
case 34:return 154
break;
case 35:return 118
break;
case 36:return 119
break;
case 37:return 120
break;
case 38:return 44
break;
case 39:return 83
break;
case 40:return 27
break;
case 41:return 28
break;
case 42:return 29
break;
case 43:return 121
break;
case 44:return 160
break;
case 45:return 160
break;
case 46:'nulo'
break;
case 47:return 15
break;
case 48:return 12
break;
case 49:return 21
break;
case 50:return 42
break;
case 51:return 159
break;
case 52:return 159 
break;
case 53:return 122
break;
case 54:return 69
break;
case 55:return 129
break;
case 56:return 130
break;
case 57:return 132
break;
case 58:return 131
break;
case 59:return 125
break;
case 60:return 126
break;
case 61:return 127
break;
case 62:return 128
break;
case 63:return 82
break;
case 64:return 153
break;
case 65:return 152
break;
case 66:return 162
break;
case 67:return 163
break;
case 68:return 150
break;
case 69:return 161
break;
case 70:return 164
break;
case 71:return 8
break;
case 72:return 10
break;
case 73:return 16
break;
case 74:return 18
break;
case 75:return 115
break;
case 76:return 116
break;
case 77:return 166
break;
case 78:return 165
break;
case 79:return 167
break;
case 80:return 148
break;
case 81:return 168
break;
case 82:return 169
break;
case 83:return 170
break;
case 84:return 171
break;
case 85:return 172
break;
case 86:return 173
break;
case 87:return 11
break;
case 88:return 96
break;
case 89:return 140
break;
case 90:return 9;
break;
case 91:return 13
break;
case 92:return 157
break;
case 93:return 156
break;
case 94:return 158
break;
case 95:return 5
break;
case 96:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:;)/i,/^(?::)/i,/^(?:(((([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)(\.)(tamanio))))/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}